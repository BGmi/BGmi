[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "bgmi"
version = "5.0.0-alpha.3"
description = 'BGmi is a cli tool for subscribed bangumi.'
authors = ["RicterZ <ricterzheng@gmail.com>"]
readme = 'README.md'
license = 'MIT'
maintainers = ["Trim21 <i@trim21.me>"]
homepage = 'https://github.com/BGmi/BGmi'
repository = 'https://github.com/BGmi/BGmi'
keywords = ['bangumi', 'bgmi', 'feed']
classifiers = [
  'Development Status :: 4 - Beta',
  'Intended Audience :: Other Audience',
  'Natural Language :: Chinese (Traditional)',
  'License :: OSI Approved :: MIT License',
  'Programming Language :: Python',
  'Programming Language :: Python :: 3.8',
  'Programming Language :: Python :: 3.9',
  'Programming Language :: Python :: 3.10',
  'Programming Language :: Python :: 3.11',
  'Programming Language :: Python :: Implementation :: CPython',
  'Programming Language :: Python :: Implementation :: PyPy',
]
packages = [{ include = "bgmi" }]

[tool.poetry-plugin-bump]
commit_msg = 'bump: v{version}'
tag_name = 'v{version}'

[tool.poetry.scripts]
bgmi = 'bgmi.main:main'
bgmi_http = 'bgmi.front.server:main'

[tool.poetry.plugins] # entry-points

[tool.poetry.plugins."bgmi.downloader"]
"aria2-rpc" = 'bgmi.downloader:Aria2DownloadRPC'
"transmission-rpc" = 'bgmi.downloader:TransmissionRPC'
"deluge-rpc" = 'bgmi.downloader:DelugeRPC'
"qbittorrent-webapi" = 'bgmi.downloader:QBittorrentWebAPI'
"noop" = 'bgmi.downloader:Noop'

[tool.poetry.dependencies]
python = "^3.8.0"
beautifulsoup4 = '==4.12.0'
requests = { extras = ["socks"], version = "2.28.2" }
icalendar = '==5.0.4'
sqlalchemy = "2.0.9"
wcwidth = "^0.2.6"
pydantic = "==1.10.7"
stevedore = "==5.0.0"
filetype = "1.2.0"
strsimpy = "0.2.1"
tomlkit = "0.11.7"
strenum = "0.4.10"
anime-episode-parser = "^0.0.8"
semver = "3.0.0"
loguru = "0.6.0"
click = "8.1.3"
packaging = "23.0"
uvicorn = { extras = ["standard"], version = "0.21.1" }
fastapi = "0.95.0"
# RPC library
transmission-rpc = "==4.1.5"
qbittorrent-api = "==2023.3.44"

[tool.poetry.group.dev.dependencies]
# tests
coverage = { version = "==7.2.2", extras = ['toml'] }
pytest = "==7.2.2"
pytest-github-actions-annotate-failures = "==0.1.8"
requests-cache = "==1.0.1"
httpx = "0.23.3"
# lint
pre-commit = '==3.2.2'
mypy = "1.2.0"
flake8 = { version = "==6.0.0", python = "^3.9" }
flake8-comprehensions = "==3.11.1"
flake8-mutable = "1.2.0"
flake8-pep3101 = "==2.0.0"
flake8-2020 = "==1.7.0"
flake8-pytest-style = "==1.7.2"
flake8-pyproject = "1.2.3"
# stubs
types-requests = "==2.28.11.17"
ruff = "0.0.261"

[tool.coverage.report]
exclude_lines = [
  'pragma: no cover',
  'if TYPE_CHECKING:',
  'if __name__ == "__main__":',
  'if typing.TYPE_CHECKING:',
  'raise NotImplementedError',
  'if os.getenv("DEBUG"):',
  'if os.getenv("DEBUG_SCRIPT"):',
  'if os.environ.get("DEBUG"):',
]

[tool.pytest.ini_options]
addopts = '-v --durations=10'
junit_family = 'legacy'

[tool.isort]
default_section = 'THIRDPARTY'
known_first_party = 'bgmi'
length_sort = false
line_length = 120
multi_line_output = 3
no_lines_before = 'LOCALFOLDER'
use_parentheses = true
include_trailing_comma = true

[tool.mypy]
disallow_untyped_defs = true
ignore_missing_imports = true
warn_return_any = true
warn_unused_configs = true
show_error_codes = true
pretty = true
plugins = ['pydantic.mypy']

[[tool.mypy.overrides]]
module = [
  "bgmi.downloader.*",
  "bgmi.website.mikan",
  "bgmi.website.bangumi_moe",
  "bgmi.website.share_dmhy",
]
disallow_untyped_defs = false

[tool.black]
line-length = 120
target-version = ['py38', 'py39', 'py310']


[tool.flake8]
max-line-length = 120
ignore = ['W503', 'E203', 'PT004']

exclude = ['.git', '__pycache__', '.venv', 'build', 'dist']

per-file-ignores = ['bgmi/lib/constants.py:C408', 'bgmi/front/routes.py:B008']

[tool.ruff]
select = [
  "B",
  "C",
  "E",
  "F",
  "G",
  "I",
  "N",
  "Q",
  "S",
  "W",
  "BLE",
  "DJ",
  "ERA",
  "EXE",
  "ICN",
  "INP",
  "ISC",
  "NPY",
  #  "DTZ",
  #  "PTH",
  "PD",
  "PGH",
  "PIE",
  "PL",
  "PT",
  "PYI",
  "RET",
  "RSE",
  "RUF",
  "SIM",
  "SLF",
  "TCH",
  "TID",
  "TRY",
  "YTT",
]
ignore = [
  'BLE001',
  'S301',
  'S314',
  'S101',
  'N815',
  'S104',
  'C901',
  'ISC003',
  'PLR0913',
  'I001',
  'RUF001',
  'SIM108',
  'TCH003',
  'RUF003',
  'RET504',
  'TRY300',
  'TRY003',
  'TRY201',
  'TRY301',
  'PLR0912',
  'PLR0915',
  'PLR2004',
  'PGH003',
]

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = [
  "A",
  "B",
  "C",
  "E",
  "F",
  "G",
  "I",
  "N",
  "Q",
  "S",
  "W",
  "BLE",
  "DJ",
  "DTZ",
  "EM",
  "ERA",
  "EXE",
  "FBT",
  "ICN",
  "INP",
  "ISC",
  "NPY",
  "PD",
  "PGH",
  "PIE",
  "PL",
  "PT",
  "PTH",
  "PYI",
  "RET",
  "RSE",
  "RUF",
  "SIM",
  "SLF",
  "TCH",
  "TID",
  "TRY",
  "YTT",
]
unfixable = []


# Same as Black.
line-length = 120

# Assume Python 3.10.
target-version = "py38"

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.ruff.per-file-ignores]
'bgmi/lib/constants.py' = ['C408']
'bgmi/front/routes.py' = ['B008']
