version: 2.1

workflow-aliases:
  require-test: &require-test
    - unittest
    - test-downloader
    - test-sqlite
    - test-mysql

  after-build: &after-build
    - build-docker
    - build-docs
    - build-binary
    - build-docs
  on-tag: &on-tag
    tags:
      only: /.*/

  on-tag-version: &on-tag-version
    tags:
      only: /v.*/
    branches:
      ignore: /.*/


workflows:
  version: 2
  main:
    jobs:

      - prepare:
          filters: *on-tag

      - unittest:
          filters: *on-tag
          requires:
            - prepare

      - test-downloader:
          filters: *on-tag
          requires:
            - prepare

      - test-sqlite:
          filters: *on-tag
          requires:
            - prepare

      - test-mysql:
          filters: *on-tag
          requires:
            - prepare

      - build-binary:
          filters: *on-tag
          requires: *require-test

      - build-docker:
          filters: *on-tag
          requires: *require-test

      - build-docs:
          filters: *on-tag
          requires: *require-test

      - deploy-docs:
          requires: *after-build
          filters: *on-tag-version

      - deploy-binary:
          requires: *after-build
          filters: *on-tag-version

aliases:
  restore_pip_cache: &restore_pip_cache
    restore_cache:
      keys:
        - pip-v1-{{ .Branch }}-{{ checksum ".pre-commit-config.yaml" }}-{{ checksum "poetry.lock" }}

  install_pip_deps: &install_pip_deps
    run:
      name: Install Dependencies
      command: |
        pip install --user toml==0.10.0
        python .circleci/export_requirements.py --all
        pip install --user --require-hashes --no-deps -r requirements.txt
        poetry config settings.virtualenvs.create false
        PIP_USER=1 poetry install

  save_pip_cache: &save_pip_cache
    save_cache:
      key: pip-v1-{{ .Branch }}-{{ checksum ".pre-commit-config.yaml" }}-{{ checksum "poetry.lock" }}
      paths:
        - /home/circleci/.cache/pip
        - /home/circleci/.cache/pypoetry
        - /home/circleci/.cache/pre-commit
        - /home/circleci/.local/bin
        - /home/circleci/.local/lib/python3.6/site-packages

  upload_codecov_report: &upload_codecov_report
    run:
      when: on_success
      name: Upload Coverage Report
      command: codecov

  restore_test_data_cache: &restore_test_data_cache
    restore_cache:
      keys:
        - test-data-{{ .Branch }}-{{ checksum ".circleci/test-data-version" }}
        - test-data-{{ .Branch }}-
        - test-data-

  save_test_data_cache: &save_test_data_cache
    save_cache:
      key: test-data-{{ .Branch }}-{{ checksum ".circleci/test-data-version" }}
      paths:
        - /home/circleci/data

  store_test_result: &store_test_result
    store_test_results:
      path: ~/junit


jobs:
  prepare:
    docker:
      - image: circleci/python:3.6
    steps:
      - checkout # check out the code in the project directory
      - *restore_pip_cache
      - *install_pip_deps

      - *restore_test_data_cache
      - run:
          name: get test data
          command: |
            mkdir -p ~/data
            curl -L https://github.com/BGmi/BGmi/releases/download/test-data/data-1.sql -o ~/data/db.sql
      - *save_test_data_cache

      - run:
          name: Code Style
          command: pre-commit run --all-files
      - run:
          name: Mypy
          command: mypy bgmi

      - *save_pip_cache

  unittest:
    docker:
      - image: circleci/python:3.6

    steps:
      - checkout # check out the code in the project directory
      - *restore_pip_cache
      - *restore_test_data_cache
      - *install_pip_deps


      - run:
          name: Unittest
          command: coverage run -m pytest bgmi --ignore=bgmi/downloader --junitxml=$HOME/junit/test_report.xml

      - *store_test_result
      - *upload_codecov_report

  test-downloader:
    docker:
      - image: circleci/python:3.6
      - image: linuxserver/deluge
        environment:
          PUID: "1001"
          PGID: "1000"
          TZ: "Asia/Shanghai"
          UMASK_SET: "022"

      - image: bgmidocker/aria2:latest
        environment:
          RPC_SECRET: aria2-rpc-secret

      - image: caseyfw/transmission
        environment:
          UID: '1000'
          USERNAME: "transmission-rpc-username"
          PASSWORD: "example-rpc-password"
    steps:
      - checkout # check out the code in the project directory
      - *restore_pip_cache
      - *restore_test_data_cache
      - *install_pip_deps

      - run:
          name: Wait for Docker Ready
          command: |
            # wait for mysql start up
            for i in `seq 1 100`; do
              nc -z 127.0.0.1 8112 && \
                nc -z 127.0.0.1 6800 && \
                nc -z 127.0.0.1 9091 && \
                echo Success && exit 0
              echo -n .
              sleep 0.1
            done
            echo Failed waiting for MySQL && exit 1

      - run:
          name: test downloader
          command: coverage run -m pytest bgmi/downloader --junitxml=$HOME/junit/test_report.xml
          environment:
            BGMI_TRANSMISSION_RPC_URL: "http://transmission-rpc-username:example-rpc-password\
            @127.0.0.1:9091/transmission/rpc"
            BGMI_ARIA2_RPC_TOKEN: token:aria2-rpc-secret

      - *store_test_result
      - *upload_codecov_report

  test-sqlite:
    docker:
      - image: circleci/python:3.6

    environment:
      DB_SQL_PATH: /home/circleci/data/db.sql

    steps:
      - checkout # check out the code in the project directory
      - *restore_pip_cache
      - *restore_test_data_cache
      - *install_pip_deps

      - run:
          name: restore sql
          command: |
            coverage run -m bgmi install --no-web

      - run:
          name: Unittest
          command: coverage run -m pytest tests/test_db_models.py --junitxml=$HOME/junit/test_report.xml

      - *store_test_result
      - *upload_codecov_report

  test-mysql:
    docker:
      - image: circleci/python:3.6
      - image: mysql:5.7.27
        # fuck 5.7.28, maybe 5.7.29 will work on CircleCI again
        command: mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_general_ci --explicit_defaults_for_timestamp=on
        environment:
          MYSQL_USER: bgmi_user
          MYSQL_PASSWORD: bgmi_user_password
          MYSQL_DATABASE: bgmi
          MYSQL_RANDOM_ROOT_PASSWORD: 'yes'

    environment:
      BGMI_DB_URL: mysql://bgmi_user:bgmi_user_password@127.0.0.1:3306/bgmi?charset=utf8mb4
      DB_SQL_PATH: /home/circleci/data/db.sql

    steps:
      - checkout # check out the code in the project directory
      - *restore_pip_cache
      - *restore_test_data_cache
      - *install_pip_deps

      - run:
          name: Wait for MySQL Ready
          command: |
            # wait for mysql start up
            for i in `seq 1 100`;
              do
                nc -z 127.0.0.1 3306 && echo Success && exit 0
                echo -n .
                sleep 1
              done
            echo Failed waiting for MySQL && exit 1

      - run:
          name: restore sql
          command: |
            coverage run -m bgmi install --no-web

      - run:
          name: Unittest
          command: coverage run -m pytest tests/test_db_models.py --junitxml=$HOME/junit/test_report.xml

      - *store_test_result
      - *upload_codecov_report


  build-docker:
    docker:
      - image: circleci/python:3.6

    steps:
      - checkout

      - setup_remote_docker

      - run:
          name: Try Build Docker
          command: docker build -t bgmi -t bgmidocker/bgmi .

      - run:
          name: Test Docker Command
          command: docker run -v $HOME/.bgmi:/bgmi --net host bgmi install

  build-docs:
    docker:
      - image: circleci/python:3.6
    steps:
      - checkout
      - *restore_pip_cache
      - *restore_test_data_cache
      - *install_pip_deps

      - run:
          name: build docs
          command: |
            cd docs
            make html

      - persist_to_workspace:
          root: docs/build
          paths: html

      - *upload_codecov_report

  deploy-docs:
    docker:
      - image: node:lts
    steps:
      - checkout
      - attach_workspace:
          at: docs/build
      - run:
          name: Install and configure dependencies
          command: |
            npm install -g --silent gh-pages@2.0.1
            git config user.email "circleci@bgmi.github.io"
            git config user.name "circleci"

      - add_ssh_keys:
          fingerprints:
            - "59:ad:fd:64:71:eb:81:01:6a:d7:1a:c9:0c:19:39:af"

      - run:
          name: Deploy docs to gh-pages branch
          command: |
            gh-pages --dotfiles --message "[skip ci] Updates" --dist docs/build/html \
                --repo https://$DOCKER_PASS@github.com/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME.git

  build-binary:
    docker:
      - image: circleci/python:3.6
    steps:
      - checkout
      - *restore_pip_cache
      - *restore_test_data_cache
      - *install_pip_deps

      - run: sudo apt-get install upx-ucl

      - run:
          name: build binary
          command: |
            pyinstaller .ci/bgmi.spec --distpath ./dist/binary/
            mv ./dist/binary/bgmi ./dist/binary/bgmi-$(uname -s)-$(uname -m)

      - store_artifacts:
          path: /home/circleci/project/dist/binary/bgmi-Linux-x86_64
          destination: bgmi-Linux-x86_64

      - persist_to_workspace:
          root: dist
          paths: binary

      - *upload_codecov_report

  deploy-binary:
    docker:
      - image: circleci/golang:1.12

    steps:
      - checkout

      - attach_workspace:
          at: ./dist

      - run:
          name: Install release tool
          command: go get github.com/tcnksm/ghr

      - run:
          name: "Publish Release on GitHub"
          command: |
            ghr -t ${DOCKER_PASS} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -delete ${CIRCLE_TAG} ./dist/binary/
